---
title:  "Code injection via undocumented NtAllocateVirtualMemory. Simple C++ example."
date:   2021-12-07 10:00:00 +0600
header:
  teaser: "/assets/images/30/2021-12-10_01-29.png"
categories: 
  - tutorial
tags:
  - injection
  - code injection
  - malware
  - red team
---

ï·½

Hello, cybersecurity enthusiasts and white hackers!

![code injection](/assets/images/30/2021-12-10_01-29.png){:class="img-responsive"}    

In the previous post I wrote about DLL injection via undocumented [NtCreateThreadEx](/tutorial/2021/12/06/malware-injection-9.html).   

Today I tried to replace another function, for example `VirtualAllocEx` with undocumented NT API function `NtAllocateVirtualMemory`. That's what came out of it. So let's go to show how to inject payload into the remote process by leveraging a WIN API functions `WriteProcessMemory`, `CreateRemoteThread` and an officially undocumented Native API `NtAllocateVirtualMemory`.    

First of all, let's take a look at function `NtAllocateVirtualMemory` syntax:    
```cpp
NTSYSAPI 
NTSTATUS
NTAPI NtAllocateVirtualMemory(
  IN HANDLE               ProcessHandle,
  IN OUT PVOID            *BaseAddress,
  IN ULONG                ZeroBits,
  IN OUT PULONG           RegionSize,
  IN ULONG                AllocationType,
  IN ULONG                Protect
);
```
So what does this function do? By [documentation](https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ntifs/nf-ntifs-ntallocatevirtualmemory), reserves, commits, or both, a region of pages within the user-mode virtual address space of a specified process. So, similar to Win API `VirtualAllocEx`.    

In order to use NtAllocateVirtualMemory function, we have to define its definition in our code:

![code injection 2](/assets/images/30/2021-12-10_02-16.png){:class="img-responsive"}    

Then, loading the `ntdll.dll` library to invoke `NtAllocateVirtualMemory`:    

![code injection 3](/assets/images/30/2021-12-10_02-20.png){:class="img-responsive"}    

And then get starting address of the our function:   

![code injection 4](/assets/images/30/2021-12-10_02-22.png){:class="img-responsive"}    

And finally allocate memory:   

![code injection 5](/assets/images/30/2021-12-10_02-23.png){:class="img-responsive"}    

And otherwise the main logic is the same.     

![code injection 6](/assets/images/30/2021-12-10_02-26.png){:class="img-responsive"}    

As shown in this code, the Windows API call can be replaced with Native API call functions. For example, `VirtualAllocEx` can be replace with `NtAllocateVirtualMemory`, `WriteProcessMemory` can be replaces with `NtWriteProcessMemory`. 

The downside to this method is that the function is undocumented so it may change in the future.

Let's go to see our simple malware in action. Compile `hack.cpp`:
```bash
x86_64-w64-mingw32-g++ hack.cpp -o hack.exe -mconsole -I/usr/share/mingw-w64/include/ -s -ffunction-sections -fdata-sections -Wno-write-strings -fno-exceptions -fmerge-all-constants -static-libstdc++ -static-libgcc -fpermissive
```

![code inection 7](/assets/images/30/2021-12-10_02-30.png){:class="img-responsive"}    

Then, run process hacker 2:

![code injection 8](/assets/images/30/2021-12-10_02-33.png){:class="img-responsive"}    

For example, the highlighted process `mspaint.exe` is our victim.    

Let's run our simple malware:   
```cmd
.\hack.exe 6252
```

![code injection 9](/assets/images/30/2021-12-10_02-36.png){:class="img-responsive"}    

As you can see our `meow-meow` messagebox is popped-up.    

Let's go to investigate properties of our victim process `PID: 6252`:   

![code injection 10](/assets/images/30/2021-12-10_02-50.png){:class="img-responsive"}    

As you can see, our `meow-meow` payload successfully injected as expected!   

The reason why it's good to have this technique in your arsenal is because we are not using `VirtualAllocEx` which is more popular and suspicious and which is more closely investigated by the blue teamers.    

I hope this post spreads awareness to the blue teamers of this interesting technique, and adds a weapon to the red teamers arsenal.      

In the next post I'll try to consider another NT API functions, the main logic is the same but there is a caveat with defining the structures and associated parameters. Without defining this structures the code will not run.

[VirtualAllocEx](https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualallocex)    
[NtAllocateVirtualMemory](https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ntifs/nf-ntifs-ntallocatevirtualmemory)    
[WriteProcessMemory](https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-writeprocessmemory)    
[CreateRemoteThread](https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createremotethread)    
[source code in Github](https://github.com/cocomelonc/2021-12-07-malware-injection-10)    

> This is a practical case for educational purposes only.      

Thanks for your time and good bye!   
*PS. All drawings and screenshots are mine*
